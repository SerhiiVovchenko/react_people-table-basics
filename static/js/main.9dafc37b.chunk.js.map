{"version":3,"sources":["types/Links.ts","components/Navigation/Navigation.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/PeopleList/PeopleList.tsx","components/PeoplePage/PeoplePage.tsx","components/HomePage/HomePage.tsx","components/Errors/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["LinkType","Navigation","className","role","isActive","classNames","to","HomePage","PeoplePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","sex","name","slug","PeopleList","people","selectedSlug","map","born","died","fatherName","motherName","hasFindMother","find","hasFindFather","useState","setPeople","isLoader","setIsLoader","isError","setIsError","fetchPeople","useCallback","peopleFromServer","useEffect","useParams","length","NotFoundPage","App","path","element","replace","index","ErrorPage","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9dafc37b.chunk.js","sourcesContent":["export enum LinkType {\n  HomePage = '/',\n  PeoplePage = '/people',\n  ErrorPage = '*',\n}\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { LinkType } from '../../types/Links';\n\nexport const Navigation = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => classNames(\n              'navbar-item',\n              {\n                'has-background-grey-lighter': isActive,\n              },\n            )}\n            to={LinkType.HomePage}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => classNames(\n              'navbar-item',\n              {\n                'has-background-grey-lighter': isActive,\n              },\n            )}\n            to={LinkType.PeoplePage}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { LinkType } from '../../types/Links';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { sex, name, slug } = person;\n\n  return (\n    <Link\n      className={classNames(\n        { 'has-text-danger': sex === 'f' },\n      )}\n      to={`${LinkType.PeoplePage}/${slug}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { LinkType } from '../../types/Links';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  people: Person[],\n  selectedSlug: string,\n};\n\nexport const PeopleList: React.FC<Props> = ({ people, selectedSlug }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(({\n          name,\n          sex,\n          born,\n          died,\n          fatherName,\n          motherName,\n          slug,\n        }: Person) => {\n          const hasFindMother = people\n            .find(person => person.name === motherName);\n          const hasFindFather = people\n            .find(person => person.name === fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={classNames(\n                { 'has-background-warning': slug === selectedSlug },\n              )}\n            >\n              <td>\n                <Link\n                  to={`${LinkType.PeoplePage}/${slug}`}\n                  className={classNames(\n                    { 'has-text-danger': sex === 'f' },\n                  )}\n                >\n                  {name}\n                </Link>\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                { hasFindMother ? (\n                  <PersonLink person={hasFindFather!} />\n                ) : (\n                  motherName || '-'\n                )}\n              </td>\n\n              <td>\n                { hasFindFather ? (\n                  <PersonLink person={hasFindFather} />\n                ) : (\n                  fatherName || '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n\n      </tbody>\n    </table>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { PeopleList } from '../PeopleList/PeopleList';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const fetchPeople = useCallback(async () => {\n    try {\n      setIsLoader(true);\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoader(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  const { slug = '' } = useParams();\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoader\n            ? <Loader />\n            : (\n              <>\n                {isError && (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                )}\n\n                {people.length === 0 && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n              </>\n            )}\n\n          {(!isError && people.length !== 0) && (\n            <PeopleList people={people} selectedSlug={slug} />\n          )}\n        </div>\n      </div>\n    </>\n\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { Navigation } from './components/Navigation/Navigation';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { NotFoundPage } from './components/Errors/NotFoundPage';\nimport { LinkType } from './types/Links';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navigation />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path={LinkType.HomePage} element={<HomePage />} />\n\n            <Route\n              path=\"home\"\n              element={\n                <Navigate to={LinkType.HomePage} replace />\n              }\n            />\n\n            <Route path={LinkType.PeoplePage}>\n              <Route index element={<PeoplePage />} />\n\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path={LinkType.ErrorPage} element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}